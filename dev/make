#!/usr/bin/env zsh
# Type: shelling
# Executor: bash
# Usage:
# 	$ dev/make -h

### << Global variables.

    ## Name of the package you are creating
	PACKAGE_NAME="zshpower"
	## Python executable
  # PYTHON_EXEC="python3" ## Executável em Python. E.g: python | python3
  # GET_SHELL=$SHELL

## >>

### << Function color for messages.

    function _msg_header_ () {
      printf "\e[0;36m→ %s\e[0m$2" "$1"
    }

    function _msg_reply_ () {
      printf "\e[0;36m→ %s\e[0m$2" "$1"
    }

    function _msg_finish_ () {
      printf "\e[0;32m✔ %s\e[0m\n" "$@"
    }

    function _msg_warning_ () {
      printf "\e[0;33m⚠ %s\e[0m\n" "$@"
    }

    function _msg_error_ () {
      printf "\e[0;31m✖ %s\e[0m\n" "$@"
    }

## >>

## << BEGIN

### << Creating file ~/.pypirc if not exists.

	function _creating_pypirc () {
	  if [[ ! -f "$HOME/.pypirc" ]]; then

cat << EOF > "$HOME"/.pypirc
[distutils]
index-servers=
   pypi
   testpypi

[pypi]
repository: https://upload.pypi.org/legacy/
username:

[testpypi]
repository: https://test.pypi.org/legacy/
username:
EOF
		fi
	}

### >>

### << Performs the linter (flake8).

	function _linters () {
		if [[ -f $(which flake8) ]] && [[ -f $(which mypy) ]]; then
			_msg_header_ "[ Linter ] Checks whether the code structure ..." "\n"
			poetry run flake8 $PACKAGE_NAME tests
			poetry run mypy $PACKAGE_NAME/
			poetry run black $PACKAGE_NAME/ --check
			_msg_finish_ "Linter finished!"
		else
			_msg_error_ "Linter Flake8 or Mypy not installed.\nInstall the requirements that this resolves."
			exit 0
		fi
	}

### >>

### << Code style (black).

	function _code_style_black () {
		if [[ -f $(which black) ]]; then
		  _msg_header_ "[ Format ] Formatting code with Black ..." "\n"
			poetry run black $PACKAGE_NAME/ tests/
			_msg_finish_ "Code formatted finished!"
		else
			_msg_error_ "black not installed.\nInstall the requirements that this resolves."
			exit 0
		fi
	}

### >>

### << Compile project.

	function _build_package () {
		_msg_header_ "[ Clearing cache and compiling ]" "\n"
		_clean
		_msg_header_ "Compiling..." "\n"
	    # eqversion
		poetry build
		cd docs; make html; cd ..
		_msg_finish_ "Compilation completed!"
	}

### >>

### << Install project.


	function _install_reinstall_package () {
		_msg_header_ "[ $1 the package ]" "\n"
		[[ $2 == "r" ]] && _uninstall_package
		_build_package
		poetry install
		_msg_finish_ "$1 completed!"
	}

### >>

### << Clean builds.

	function _clean () {
		_msg_header_ "Cleaning build..." "\n"
		rm -rf ./build ./dist ./.eggs ./.pytest_cache ./.tox
		rm -rf ./docs/_build
		_msg_finish_ "Clean build!"
	}

### >>

### << Clean builds.

    function _uninstall_package () {
      _msg_header_ "Uninstalling the package..." "\n"
      pip uninstall ${PACKAGE_NAME} -y
      _msg_finish_ "Uninstall completed!"
    }

### >>

### << Upload to Test Pypi (Using Twine).

    function _upload_test_pypi () {
      _creating_pypirc
      _msg_header_ "[ Upload to Test Pypi (http://test.pypi.org) ]" "\n"
      _build_package
      _msg_header_ "Starting upload..."
      poetry run twine upload --repository testpypi dist/*
      _msg_finish_ "Upload complete!"
    }

### >>

### << Upload to Pypi (Using Twine).

    function _upload_pypi () {
      _creating_pypirc
      _msg_header_ "[ Upload to Pypi (https://pypi.org) ]" "\n"
      _build_package
      _msg_header_ "Starting upload..."
      poetry run twine upload --repository pypi dist/*
      _msg_finish_ "Upload complete!"
      # twine upload dist/*
    }

### >>

### << Help.

	function _help () {
		cat << EOT

Welcome to the package manager.

Usage: $0 <options>

    options:
	> build        | -b          Compile the package.
	> clean        | -c          Clears the build.
	> install      | -i          Install the package.
	> reinstall    | -r          Reinstall the package.
	> uninstall    | -u          Uninstall the package.
	> linter       | -l          Checks whether the code structure complies with Pep8.
	> tests        | -t         Run tests.
	> black        | -bk         Formatting code with Black.
	> testpypi     | -tpp        Upload the package to the Test PyPi server.
	> pypi         | -pp         Upload the package to the PyPi server.

Copyright (c) 2019-$(date +%Y) - William C. Canin

EOT
	}

## >>

### << Main.

	function _main () {

		case "$1" in
		  build|-b|-B)
			  _build_package
		  ;;
		  install|-i|-I)
			  _install_reinstall_package "Installation"
		  ;;
		  reinstall|-r|-R)
			  _install_reinstall_package "Reinstallation" "r"
		  ;;
		  clean|-c|-C)
				_clean
		  ;;
		  linter|-l)
				_linters
		  ;;
      black|-bk)
			  _code_style_black
		  ;;
		  uninstall|-u|-U)
				_uninstall_package
		  ;;
		  tests|-t)
				poetry run pytest
			;;
		  testpypi|-tpp)
        _upload_test_pypi
		  ;;
		  pypi|-pp)
        _upload_pypi
		  ;;
		  help|-h)
				_help
			;;
		  *)
		    _help
		  ;;
		esac

	}

## >>

### Start.

  _main "$1"

## END >>
